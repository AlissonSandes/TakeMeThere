/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package takemethere;

import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.input.Clipboard;
import javafx.scene.input.DataFormat;
import javax.swing.JOptionPane;
import jdk.nashorn.internal.objects.NativeArray;
/**
 *
 * @author Kashikoku
 */
public class MainScreen extends javax.swing.JFrame {

    public String latitude="";
    public String longitude="";
    public String altura="";
    
    public double lastlat=0;
    public double lastlong=0;
    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coordenadas = new javax.swing.JTextField();
        btnparar = new javax.swing.JButton();
        btnColar = new javax.swing.JButton();
        btniniciar = new javax.swing.JButton();
        minalt = new javax.swing.JTextField();
        maxalt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        porta = new javax.swing.JTextField();
        ip = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        calculardist = new javax.swing.JButton();
        resultado = new javax.swing.JLabel();
        cooldown = new javax.swing.JLabel();
        btnDisconnect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Take-me There");
        setName("Take-me There"); // NOI18N

        coordenadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coordenadasActionPerformed(evt);
            }
        });

        btnparar.setText("STOP");
        btnparar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpararActionPerformed(evt);
            }
        });

        btnColar.setText("PASTE AND FORMAT");
        btnColar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColarActionPerformed(evt);
            }
        });

        btniniciar.setText("START");
        btniniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btniniciarActionPerformed(evt);
            }
        });

        minalt.setText("10");
        minalt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minaltActionPerformed(evt);
            }
        });

        maxalt.setText("15");

        jLabel1.setText("Height between");

        jLabel2.setText("and");

        jLabel3.setText("Coordinates");

        jLabel4.setText("Connect you phone using usb and allow the popup then click SET PORT");

        jButton1.setText("SET PORT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        porta.setText("5555");

        ip.setText("192.168.1.100");

        jButton2.setText("CONNECT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Disconnect the usb, and make sure you are in the same network in both ");

        jLabel6.setText("celphone and computer, then type your cellphone IP on the area below");

        jLabel7.setText("If all went well, you should be able to PASTE AND FORMAT your ");

        jLabel8.setText("coordinates, and click START to teleport.");

        calculardist.setText("CALCULATE DIST.");
        calculardist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculardistActionPerformed(evt);
            }
        });

        resultado.setText("Not Calculated");

        cooldown.setText("Recomended coooldown");

        btnDisconnect.setText("DISCONNECT ALL");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnColar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(calculardist)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btniniciar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnparar))
                    .addComponent(coordenadas, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(minalt, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(maxalt, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jLabel3))
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(resultado)
                                    .addComponent(cooldown)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addGap(27, 27, 27)
                                        .addComponent(porta, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jButton2)
                                            .addGap(30, 30, 30)
                                            .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnDisconnect))
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(porta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(6, 6, 6)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDisconnect))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resultado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cooldown)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(coordenadas, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minalt, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(maxalt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnColar)
                    .addComponent(btniniciar)
                    .addComponent(btnparar)
                    .addComponent(calculardist))
                .addGap(21, 21, 21))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void coordenadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coordenadasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coordenadasActionPerformed

    private void btnColarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColarActionPerformed
        //https://maps.google.com/maps?q=40.6709569,-73.9655639
        
        
    //You can use following method getting clipboard text in Java:

        

        String link = getClipBoard();
        int startlat=0;
        int endlat=0;
        int startlon=0;
        int endlon=0;
//        for(int i=0;i<link.length();i++){;;;;
//            if(String.valueOf(link.charAt(i)).equals("=")){
//                startlat=i+1;
//            }
//            if(String.valueOf(link.charAt(i)).equals(",")){
//                endlat=i-1;
//                startlon=i+1;
//            }
//        }
//        endlon=link.length()-1;
//
//        latitude = link.substring(startlat, endlat+1);
//        longitude = link.substring(startlon, endlon+1);
//
//        
//        Random r = new Random();
//        try {
//             int low = Integer.parseInt(minalt.getText());
//        int high = Integer.parseInt(maxalt.getText());
//        int result = r.nextInt(high-low) + low;
//        altura = String.valueOf(result);
//        } catch (Exception e) {
//            
//        }
        formatCoordinates(link);
       System.out.print("Latitude = "+latitude+ " longitude = "+longitude);
        coordenadas.setText(latitude+" , "+longitude +" , "+altura);
        
    }//GEN-LAST:event_btnColarActionPerformed

    private void minaltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minaltActionPerformed
        try {
            runCmd("adb disconnect");
        } catch (Exception e) {
            System.out.println(e);
        }
        
        
    }//GEN-LAST:event_minaltActionPerformed

    private void btniniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btniniciarActionPerformed
       
        try {
            runCmd(" adb shell am start-foreground-service -a theappninjas.gpsjoystick.TELEPORT --ef lat "+latitude+" --ef lng "+longitude+" --ef alt "+altura);
            lastlat = Double.parseDouble(latitude);
            lastlong = Double.parseDouble(longitude);
            Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            jLabel3.setText("Last tel.:"+latitude+", "+longitude+" at "+ sdf.format(cal.getTime()));
        }catch(Exception e){
            System.out.println(e);
        }
        
    }//GEN-LAST:event_btniniciarActionPerformed

    private void btnpararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpararActionPerformed
        try {
            runCmd("adb shell am start-foreground-service -a theappninjas.gpsjoystick.STOP  ");
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_btnpararActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try {
            runCmd(" adb tcpip "+porta.getText());
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            runCmd("adb connect "+ip.getText()+":"+porta.getText());
            JOptionPane.showMessageDialog(rootPane, runCmdReturn("adb devices"));
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void calculardistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculardistActionPerformed
        DistanceCalculator d = new DistanceCalculator();
        double newlat = Double.parseDouble(latitude);
        double newlong = Double.parseDouble(longitude);
        
        System.out.println("Latitude e longitude anteriores :"+lastlat+" , "+lastlong);
        
        double distance;
        distance = DistanceCalculator.distance(lastlat,lastlong,newlat,newlong ,"K");
        resultado.setText("Distance between coordinates: "+distance);
        if(distance>=0 && distance<2){
            cooldown.setText("48 sec.");
        }
        if(distance>=2 && distance<3){
            cooldown.setText("1 min.");
        }
        if (distance>=3 && distance<5){
            cooldown.setText("2 min.");
        }
        if (distance>=5 && distance<8){
            cooldown.setText("4 min.");
        }
        if (distance>=10 && distance<15){
            cooldown.setText("6 min.");
        }
        if (distance>=15 && distance<20){
            cooldown.setText("8 min.");
        }
        if (distance>=20 && distance<25){
            cooldown.setText("11 min.");
        }
        if (distance>=25&& distance<50){
            cooldown.setText("14 min.");
        }
        if (distance>=50 && distance<75){
            cooldown.setText("20 min.");
        }
        if(distance>75){
            cooldown.setText("> 20min");        
        }
        
    }//GEN-LAST:event_calculardistActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
        try {
            runCmd("adb disconnect");
        } catch (Exception e) {
            System.out.println(e);
        }
        
        
    }//GEN-LAST:event_btnDisconnectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }
    public String getClipBoard(){
            try {
                return (String)Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor);
            } catch (HeadlessException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();            
            } catch (UnsupportedFlavorException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();            
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            return "";
        }
    public void runCmd(String comando) throws IOException{
        System.out.println("chamado o comando");
        System.out.println("comando "+comando);
        ProcessBuilder builder = new ProcessBuilder(
                "cmd.exe", "/c", "cd \"C:\\platform-tools\" && "+comando);
            builder.redirectErrorStream(true);
            Process p = builder.start();
            BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            while (true) {
                line = r.readLine();
                if (line == null) { break; }
                System.out.println(line);
            }
    }
    public String runCmdReturn(String comando) throws IOException{
        System.out.println("chamado o comando");
        System.out.println("comando "+comando);
        ProcessBuilder builder = new ProcessBuilder(
                "cmd.exe", "/c", "cd \"C:\\platform-tools\" && "+comando);
            builder.redirectErrorStream(true);
            Process p = builder.start();
            BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            String result="";
            while (true) {
                line = r.readLine();
                if (line == null) { break; }
                result = result+"\n"+line;
            }
            return result;
    }
    
    public void formatCoordinates(String rawCoordinates){
        if(rawCoordinates.contains("openstreetmap")){
            //https://www.openstreetmap.org/#map=18/21.27039/-157.81868
            int startOfCoords=0;
            startOfCoords = rawCoordinates.indexOf("=");
            rawCoordinates = rawCoordinates.substring(startOfCoords+1);
            System.out.println(rawCoordinates);

            ArrayList<Integer> slss = new ArrayList<Integer>();
            
            char caracteres[] = new char[rawCoordinates.length()];
            rawCoordinates.getChars(0,rawCoordinates.length()-1,caracteres,0);
            char separator = "/".toCharArray()[0];
            
            for (int i = 0; i < caracteres.length; i++) {
                char c = caracteres[i];
                if(c==separator)
                    slss.add(i);
                      
            }
            System.out.println(slss.size());
            if(slss.size()==2){
                String[] coordinates = rawCoordinates.split("/");
                altura= coordinates[0];
                latitude = coordinates[1];
                longitude = coordinates[2];
            }
            if(slss.size()==1){
                String[] coordinates = rawCoordinates.split("/");
                latitude = coordinates[0];
                longitude = coordinates[1];
                 Random r = new Random();
                try {
                     int low = Integer.parseInt(minalt.getText());
                int high = Integer.parseInt(maxalt.getText());
                int result = r.nextInt(high-low) + low;
                altura = String.valueOf(result);
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
            return; 
        }
        //https://maps.google.com/maps?q=40.72610201,-73.86538358
        if(rawCoordinates.contains("maps.google")){
            int startOfCoords=0;
            startOfCoords = rawCoordinates.indexOf("=");
            rawCoordinates = rawCoordinates.substring(startOfCoords+1);
            System.out.println(rawCoordinates);
            
            ArrayList<Integer> slss = new ArrayList<Integer>();
            
            char caracteres[] = new char[rawCoordinates.length()];
            rawCoordinates.getChars(0,rawCoordinates.length()-1,caracteres,0);
            char separator = ",".toCharArray()[0];
            
            for (int i = 0; i < caracteres.length; i++) {
                char c = caracteres[i];
                if(c==separator)
                    slss.add(i);        
            }
            if(slss.size()==1){
                String[] coordinates = rawCoordinates.split(",");
                latitude = coordinates[0];
                longitude = coordinates[1];
                 Random r = new Random();
                try {
                     int low = Integer.parseInt(minalt.getText());
                int high = Integer.parseInt(maxalt.getText());
                int result = r.nextInt(high-low) + low;
                altura = String.valueOf(result);
                } catch (Exception e) {
                    System.out.println(e);
                }
            }
            return; 
        }
        //52.383900,4.905546

        rawCoordinates = rawCoordinates.replaceAll("[^0-9.,]+","");
        String[] coordinates = rawCoordinates.split(",");
                latitude = coordinates[0];
                longitude = coordinates[1];
                
                Random r = new Random();
                try {
                     int low = Integer.parseInt(minalt.getText());
                int high = Integer.parseInt(maxalt.getText());
                int result = r.nextInt(high-low) + low;
                altura = String.valueOf(result);
                } catch (Exception e) {
                    System.out.println(e);
                }
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnColar;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btniniciar;
    private javax.swing.JButton btnparar;
    private javax.swing.JButton calculardist;
    private javax.swing.JLabel cooldown;
    private javax.swing.JTextField coordenadas;
    private javax.swing.JTextField ip;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField maxalt;
    private javax.swing.JTextField minalt;
    private javax.swing.JTextField porta;
    private javax.swing.JLabel resultado;
    // End of variables declaration//GEN-END:variables
}
